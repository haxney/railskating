require 'coveralls'
Coveralls::Output.silent = true
Coveralls.wear_merged!('rails')
Coveralls::Output.silent = false

# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'cucumber/rails'

# Pick up custom Rspec matchers
Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

Before do
  SeedFu.seed
end

After do
  FactoryGirl.reload
end

World(FactoryGirl::Syntax::Methods)

DatabaseCleaner.strategy = :transaction

# Transactions are local to a single thread, so features which are
# multi-threaded cannot use transactions.
Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
  # Don't try to delete from `couple_round_tallies`. It is a view.
  DatabaseCleaner.strategy = :truncation, {:except => %w[couple_round_tallies]}
end

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation

require 'capybara/poltergeist'
Capybara.javascript_driver = :poltergeist

Capybara.register_driver :poltergeist do |app|
  options = {
    inspector: true
  }
  Capybara::Poltergeist::Driver.new(app, options)
end
